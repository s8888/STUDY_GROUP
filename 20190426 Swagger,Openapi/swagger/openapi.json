{
  "openapi": "3.0.1",
  "info": {
    "title": "Swagger Sample",
    "description": "This is a sample.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://Bookstore.swagger.io/v2"
    },
    {
      "url": "http://Bookstore.swagger.io/v2"
    }
  ],
  "tags": [
    {
      "name": "book",
      "description": "Everything about your Books",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/book": {
      "put": {
        "tags": [
          "book"
        ],
        "summary": "Update an existing book",
        "operationId": "updateBook",
        "requestBody": {
          "description": "Book object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "photoUrls": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "doggie"
                    }
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": [
                  "name",
                  "photoUrls"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "doggie"
                  },
                  "photoUrls": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Book not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "book"
        ],
        "summary": "Add a new Book to the store",
        "operationId": "addBook",
        "requestBody": {
          "description": "Book object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "security": [
          {
            "Bookstore_auth": [
              "write:Books",
              "read:Books"
            ]
          }
        ]
      }
    },
    "/Book/{BookId}": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Find Book by ID",
        "description": "Returns a single Book",
        "operationId": "getBookById",
        "parameters": [
          {
            "name": "BookId",
            "in": "path",
            "description": "ID of Book to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Book not found",
            "content": {}
          }
        }
      }
    },
    "/Book/{BookId}/uploadImage": {
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "uploads an image",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "BookId",
            "in": "path",
            "description": "ID of Book to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "type": "string",
                    "description": "Additional data to pass to server"
                  },
                  "file": {
                    "type": "string",
                    "description": "file to upload",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bookstore_auth": [
              "write:Books",
              "read:Books"
            ]
          }
        ]
      }
    },
    "/Book/findByStatus": {
      "get": {
        "summary": "Finds Books by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findBooksByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        },
        "security": [
          {
            "Bookstore_auth": [
              "write:Books",
              "read:Books"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Book": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag1"
            }
          },
          "status": {
            "type": "string",
            "description": "Book status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "Book"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Tag1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "Bookstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://Bookstore.swagger.io/oauth/dialog",
            "scopes": {
              "write:Books": "modify Books in your account",
              "read:Books": "read your Books"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}